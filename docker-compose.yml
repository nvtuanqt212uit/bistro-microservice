version: '0'
services:

##RabbitMQ Docker Compose Config
  rabbitmq:
    image: rabbitmq:3.12.10-management-alpine
    container_name: 'rabbitmq'
    restart: unless-stopped
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: rabbitmq-diagnostics -q status
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - bistro-microservices-network

  ## User Service Mongo Docker Compose Config
  user-service-mongo:
    container_name: user-service-mongo
    image: mongo:latest
    restart: unless-stopped
    hostname: user-service-mongo
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    volumes:
      - user-service-mongo-data:/data/db
    networks:
        - bistro-microservices-network

  ##Auth Service MySQL Docker Compose Config
  auth-service-mysql:
    image: mysql:8.2.0
    container_name: auth-service-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: bistro-auth-service
      MYSQL_USER: authservice
      MYSQL_PASSWORD: 12345678
    hostname: auth-service-mysql
    volumes:
      - auth-service-mysql-data:/var/lib/mysql
      - ./auth-service/src/main/resources/script:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD", "curl" ,"-f", "http://auth-service-mysql:3306"]
      interval: 1s
      retries: 3
      start_period: 25s
    networks:
      - bistro-microservices-network

##Food Service MySQL Docker Compose Config
  food-service-mysql:
    image: mysql:8.2.0
    container_name: food-service-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: bistro-food-service
      MYSQL_USER: foodservice
      MYSQL_PASSWORD: 12345678
    hostname: food-service-mysql
    volumes:
      - food-service-mysql-data:/var/lib/mysql
      - ./food-service/src/main/resources/script:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD", "curl" ,"-f", "http://food-service-mysql:3306" ]
      interval: 1s
      retries: 3
      start_period: 25s
    networks:
      - bistro-microservices-network

##Order Service MySQL Docker Compose Config
  order-service-mysql:
    image: mysql:8.2.0
    container_name: order-service-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: bistro-order-service
      MYSQL_USER: orderservice
      MYSQL_PASSWORD: 12345678
    hostname: order-service-mysql
    volumes:
      - order-service-mysql-data:/var/lib/mysql
      - ./order-service/src/main/resources/script:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD", "curl" ,"-f", "http://order-service-mysql:3306" ]
      interval: 1s
      retries: 3
      start_period: 25s
    networks:
      - bistro-microservices-network

  payment-service-mysql:
    image: mysql:8.2.0
    container_name:  payment-service-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: bistro-payment-service
      MYSQL_USER: paymentservice
      MYSQL_PASSWORD: 12345678
    hostname: payment-service-mysql
    volumes:
      - payment-service-mysql-data:/var/lib/mysql
      - ./payment-service/src/main/resources/script:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD", "curl" ,"-f", "http://payment-service-mysql:3306" ]
      interval: 1s
      retries: 3
      start_period: 25s
    networks:
      - bistro-microservices-network

##Config Server Docker Compose Config
  config-server:
    container_name: config-server
    restart: unless-stopped
    build:
      context: ./config-server
      dockerfile: Dockerfile
    hostname: config-server
    ports:
        - "8888:8888"
    networks:
      - bistro-microservices-network

##Eureka Server Docker Compose Config
  eureka-server:
    container_name: eureka-server
    restart: unless-stopped
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    hostname: eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - bistro-microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://eureka-server:8761" ]
      interval: 30s
      timeout: 10s
      retries: 5

  ##API Gateway Docker Compose Config
  api-gateway:
    container_name: api-gateway
    restart: unless-stopped
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    hostname: api-gateway
    ports:
      - "8222:8222"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=apigateway
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    networks:
      - bistro-microservices-network

##Auth Service Docker Compose Config
  auth-service:
    container_name: auth-service
    restart: unless-stopped
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    hostname: auth-service
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      auth-service-mysql:
        condition: service_healthy
      api-gateway:
        condition: service_started
      user-service:
        condition: service_started
    environment:
     - SPRING_PROFILES_ACTIVE=docker
     - SPRING_APPLICATION_NAME=authservice
     - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    networks:
      - bistro-microservices-network

##User Service Docker Compose Config
  user-service:
    container_name: user-service
    restart: unless-stopped
    build:
      context: ./user-service
      dockerfile: Dockerfile
    hostname: user-service
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      user-service-mongo:
        condition: service_healthy
      api-gateway:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=userservice
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    links:
      - user-service-mongo:user-service-mongo
    networks:
      - bistro-microservices-network

##Food Service Docker Compose Config
  food-service:
    container_name: food-service
    restart: unless-stopped
    build:
      context: ./food-service
      dockerfile: Dockerfile
    hostname: food-service
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      food-service-mysql:
        condition: service_healthy
      api-gateway:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=foodservice
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    networks:
      - bistro-microservices-network

##Order Service Docker Compose Config
  order-service:
    container_name: order-service
    restart: unless-stopped
    build:
      context: ./order-service
      dockerfile: Dockerfile
    hostname: order-service
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      order-service-mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      api-gateway:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=orderservice
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    links:
      - rabbitmq:rabbitmq
      - order-service-mysql:order-service-mysql
      - food-service:food-service
      - user-service:user-service
    networks:
      - bistro-microservices-network


  payment-service:
    container_name: payment-service
    restart: unless-stopped
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    hostname: payment-service
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      order-service-mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      api-gateway:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=paymentservice
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    links:
      - rabbitmq:rabbitmq
      - payment-service-mysql:payment-service-mysql
      - order-service:order-service
    networks:
      - bistro-microservices-network

  # Tracing service
  bistro-zipkin:
    image: openzipkin/zipkin
    container_name: bistro-zipkin
    hostname: bistro-zipkin
    ports:
      - "9411:9411"
    networks:
      - bistro-microservices-network

  # Monitoring Services
  bistro-prometheus:
    build:
      context: ./bistro-prometheus
      dockerfile: Dockerfile
    restart: always
    container_name: bistro-prometheus
    hostname: bistro-prometheus
    volumes:
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - bistro-microservices-network

volumes:
  auth-service-mysql-data:
  user-service-mongo-data:
  food-service-mysql-data:
  order-service-mysql-data:
  payment-service-mysql-data:
  bistro-grafana-volume:
  prometheus-data:
networks:
  bistro-microservices-network:
    name: bistro-microservices-network

